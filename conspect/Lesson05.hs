

module Lesson05 where
import Data.Semigroup (First(..))
-- Класс полугруппы
-- Некий тип является полугруппой, если для 
-- него имеет место некая операция, которая из двух
-- значений соберет одно значение
-- Для нее соблюдается закон, что эта операция ассоциативная
-- https://ru.wikipedia.org/wiki/%D0%90%D1%81%D1%81%D0%BE%D1%86%D0%B8%D0%B0%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D1%81%D1%82%D1%8C_(%D0%BC%D0%B0%D1%82%D0%B5%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0)
-- т.е. неважно в какой последовательности мы
-- применяем оператор <> к a, b, c
-- a <> (b <> c) == (a <> b) <> c
-- Пример ассоциативной операции в языке это конкатенация
-- списков ([1, 2 ] <> [3, 4]) <> [5, 6] == [1, 2 ] <> ([3, 4] <> [5, 6])

-- class Semigroup a where
--     (<>) :: a -> a -> a
    
--     a <> (b <> c) == (a <> b) <> c

-- Посмотреть класс в репле :i Semigroup

-- newtype First a = First { getFirst :: a }

first = First (First "a", "b") <> First (First "b", "c")

-- Большое количество встроенных типов поддерживают
-- полугруппу, например Maybe

-- ghci> Just [1, 2] <> Just [3, 4]
-- Just [1,2,3,4]

-- ghci> Just [1, 2] <> Nothing
-- Just [1,2]

-- Также работает с кортежами и любыми вложенными
-- струкртурами лиж бы они поддерживали Semigroup
-- ghci> (Just "foo", [1, 2]) <> (Just "bar", [3, 4])
-- (Just "foobar",[1,2,3,4])
